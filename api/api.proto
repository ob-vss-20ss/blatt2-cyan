syntax = "proto3";
package api;
option go_package = ".;api";


//Catalog---------------------------------------------------------------------------
service Catalog {
    rpc GetItemsInStock(ItemsInStockRequest) returns (ItemsInStockResponse) {}
    rpc GetItem(ItemRequest) returns (ItemResponse) {}
}

message Item {
    uint32 itemID = 1;   
	string name = 2;    
    uint32 price = 3;
    uint32 available = 4;
}

message ItemsInStockRequest {

}

message ItemsInStockResponse {
    repeated Item items = 1;
}

message ItemRequest {
    uint32 ItemID = 1;
}

message ItemResponse {
    uint32 itemID = 1;   
	string name = 2;    
	uint32 price = 3;
}
 
//Stock-------------------------------------------------------------------------------
service Stock {
    rpc GetItemsInStock(ItemsInStockRequest) returns (ItemsInStockResponse) {}
    rpc GetItem(ItemRequest) returns (ItemResponse) {}
    rpc GetStockOfItem(StockOfItemRequest) returns (StockOfItemResponse) {}
    rpc ReduceStockOfItem(ReduceStockRequest) returns (ReduceStockResponse) {}
    rpc IncreaseStockOfItem(IncreaseStockRequest) returns (IncreaseStockResponse) {}
}

message StockOfItemRequest {
    uint32 itemID = 1;
}

message StockOfItemResponse {
    uint32 stock = 1;
}

message ReduceStockRequest {
    uint32 itemID = 1;
    uint32 amount = 2;
}

message ReduceStockResponse {
    
}

message IncreaseStockRequest {
    uint32 itemID = 1;
    uint32 amount = 2;
}

message IncreaseStockResponse {
    
}

//Customer-----------------------------------------------------------------------------
service Customer {
    rpc RegisterCustomer(RegisterCustomerRequest) returns (RegisterCustomerResponse) {}
    rpc GetCustomer(GetCustomerRequest) returns (GetCustomerResponse) {}
    rpc DeleteCustomer(DeleteCustomerRequest) returns (DeleteCustomerResponse) {}
}

message RegisterCustomerRequest {
    uint32 customerID = 1;   
	string name = 2;    
	string address = 3; 
}

message RegisterCustomerResponse {
    uint32 customerID = 1; 
}

message GetCustomerRequest {
    uint32 customerID = 1;
}

message GetCustomerResponse {
    uint32 customerID = 1;
    string name = 2;
    string address = 3;
}

message DeleteCustomerRequest {
    uint32 customerID = 1;
}

message DeleteCustomerResponse{
    uint32 customerID = 1; 
}

//Order-------------------------------------------------------------------------------
service Order {
    rpc PlaceOrder(PlaceOrderRequest) returns (PlaceOrderResponse) {}
    rpc ReturnItem(ReturnRequest) returns (ReturnResponse) {}
    rpc CancelOrder(CancelRequest) returns (CancelResponse) {}
    rpc GetOrder(GetOrderRequest) returns (GetOrderResponse) {}
}

message ArticleWithAmount {
    uint32 ArticleID = 1;
    uint32 amount = 2;
}

message PlaceOrderRequest {
    uint32 customerID = 1;
    repeated ArticleWithAmount articleList= 2;
}

message PlaceOrderResponse {
    uint32 OrderID = 1;
    string message = 2;
}

message ReturnRequest {
    uint32 customerID = 1;
    uint32 orderID = 2;
    bool replacement = 3;
    repeated ArticleWithAmount articleList = 4;
}

message ReturnResponse {
    string message= 1;
}

message CancelRequest {
    uint32 customerID = 1;
    uint32 orderID = 2;
}

message CancelResponse {
    string message = 2;
}

message GetOrderRequest {
    uint32 OrderID = 1;
}

message GetOrderResponse {
    uint32 customerID = 1;
    repeated ArticleWithAmount articleList= 2;
}

//Payment----------------------------------------------------------------------------
service Payment {
    rpc ReceivePayment(PaymentRequest) returns (PaymentResponse) {}
}

message PaymentRequest {
   uint32 orderID = 1;
}

message PaymentResponse {}


//Shipment---------------------------------------------------------------------------
service Shipment {

}

//Event------------------------------------------------------------------------------

message Event {
	// unique id
	string id = 1;
	// unix timestamp
	int64 timestamp = 2;
	// message
	string message = 3;
}