// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api/api.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Catalog service

func NewCatalogEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Catalog service

type CatalogService interface {
	GetItemsInStock(ctx context.Context, in *ItemsInStockRequest, opts ...client.CallOption) (*ItemsInStockResponse, error)
}

type catalogService struct {
	c    client.Client
	name string
}

func NewCatalogService(name string, c client.Client) CatalogService {
	return &catalogService{
		c:    c,
		name: name,
	}
}

func (c *catalogService) GetItemsInStock(ctx context.Context, in *ItemsInStockRequest, opts ...client.CallOption) (*ItemsInStockResponse, error) {
	req := c.c.NewRequest(c.name, "Catalog.GetItemsInStock", in)
	out := new(ItemsInStockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Catalog service

type CatalogHandler interface {
	GetItemsInStock(context.Context, *ItemsInStockRequest, *ItemsInStockResponse) error
}

func RegisterCatalogHandler(s server.Server, hdlr CatalogHandler, opts ...server.HandlerOption) error {
	type catalog interface {
		GetItemsInStock(ctx context.Context, in *ItemsInStockRequest, out *ItemsInStockResponse) error
	}
	type Catalog struct {
		catalog
	}
	h := &catalogHandler{hdlr}
	return s.Handle(s.NewHandler(&Catalog{h}, opts...))
}

type catalogHandler struct {
	CatalogHandler
}

func (h *catalogHandler) GetItemsInStock(ctx context.Context, in *ItemsInStockRequest, out *ItemsInStockResponse) error {
	return h.CatalogHandler.GetItemsInStock(ctx, in, out)
}

// Api Endpoints for Stock service

func NewStockEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Stock service

type StockService interface {
	GetItemsInStock(ctx context.Context, in *ItemsInStockRequest, opts ...client.CallOption) (*ItemsInStockResponse, error)
	GetStockOfItem(ctx context.Context, in *StockOfItemRequest, opts ...client.CallOption) (*StockOfItemResponse, error)
	ReduceStockOfItem(ctx context.Context, in *ReduceStockRequest, opts ...client.CallOption) (*ReduceStockResponse, error)
	IncreaeStockOfItem(ctx context.Context, in *IncreaseStockRequest, opts ...client.CallOption) (*IncreaseStockResponse, error)
}

type stockService struct {
	c    client.Client
	name string
}

func NewStockService(name string, c client.Client) StockService {
	return &stockService{
		c:    c,
		name: name,
	}
}

func (c *stockService) GetItemsInStock(ctx context.Context, in *ItemsInStockRequest, opts ...client.CallOption) (*ItemsInStockResponse, error) {
	req := c.c.NewRequest(c.name, "Stock.GetItemsInStock", in)
	out := new(ItemsInStockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockService) GetStockOfItem(ctx context.Context, in *StockOfItemRequest, opts ...client.CallOption) (*StockOfItemResponse, error) {
	req := c.c.NewRequest(c.name, "Stock.GetStockOfItem", in)
	out := new(StockOfItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockService) ReduceStockOfItem(ctx context.Context, in *ReduceStockRequest, opts ...client.CallOption) (*ReduceStockResponse, error) {
	req := c.c.NewRequest(c.name, "Stock.ReduceStockOfItem", in)
	out := new(ReduceStockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockService) IncreaeStockOfItem(ctx context.Context, in *IncreaseStockRequest, opts ...client.CallOption) (*IncreaseStockResponse, error) {
	req := c.c.NewRequest(c.name, "Stock.IncreaeStockOfItem", in)
	out := new(IncreaseStockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Stock service

type StockHandler interface {
	GetItemsInStock(context.Context, *ItemsInStockRequest, *ItemsInStockResponse) error
	GetStockOfItem(context.Context, *StockOfItemRequest, *StockOfItemResponse) error
	ReduceStockOfItem(context.Context, *ReduceStockRequest, *ReduceStockResponse) error
	IncreaeStockOfItem(context.Context, *IncreaseStockRequest, *IncreaseStockResponse) error
}

func RegisterStockHandler(s server.Server, hdlr StockHandler, opts ...server.HandlerOption) error {
	type stock interface {
		GetItemsInStock(ctx context.Context, in *ItemsInStockRequest, out *ItemsInStockResponse) error
		GetStockOfItem(ctx context.Context, in *StockOfItemRequest, out *StockOfItemResponse) error
		ReduceStockOfItem(ctx context.Context, in *ReduceStockRequest, out *ReduceStockResponse) error
		IncreaeStockOfItem(ctx context.Context, in *IncreaseStockRequest, out *IncreaseStockResponse) error
	}
	type Stock struct {
		stock
	}
	h := &stockHandler{hdlr}
	return s.Handle(s.NewHandler(&Stock{h}, opts...))
}

type stockHandler struct {
	StockHandler
}

func (h *stockHandler) GetItemsInStock(ctx context.Context, in *ItemsInStockRequest, out *ItemsInStockResponse) error {
	return h.StockHandler.GetItemsInStock(ctx, in, out)
}

func (h *stockHandler) GetStockOfItem(ctx context.Context, in *StockOfItemRequest, out *StockOfItemResponse) error {
	return h.StockHandler.GetStockOfItem(ctx, in, out)
}

func (h *stockHandler) ReduceStockOfItem(ctx context.Context, in *ReduceStockRequest, out *ReduceStockResponse) error {
	return h.StockHandler.ReduceStockOfItem(ctx, in, out)
}

func (h *stockHandler) IncreaeStockOfItem(ctx context.Context, in *IncreaseStockRequest, out *IncreaseStockResponse) error {
	return h.StockHandler.IncreaeStockOfItem(ctx, in, out)
}

// Api Endpoints for Customer service

func NewCustomerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Customer service

type CustomerService interface {
	RegisterCustomer(ctx context.Context, in *RegisterCustomerRequest, opts ...client.CallOption) (*RegisterCustomerResponse, error)
	GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...client.CallOption) (*GetCustomerResponse, error)
	DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...client.CallOption) (*DeleteCustomerResponse, error)
}

type customerService struct {
	c    client.Client
	name string
}

func NewCustomerService(name string, c client.Client) CustomerService {
	return &customerService{
		c:    c,
		name: name,
	}
}

func (c *customerService) RegisterCustomer(ctx context.Context, in *RegisterCustomerRequest, opts ...client.CallOption) (*RegisterCustomerResponse, error) {
	req := c.c.NewRequest(c.name, "Customer.RegisterCustomer", in)
	out := new(RegisterCustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...client.CallOption) (*GetCustomerResponse, error) {
	req := c.c.NewRequest(c.name, "Customer.GetCustomer", in)
	out := new(GetCustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...client.CallOption) (*DeleteCustomerResponse, error) {
	req := c.c.NewRequest(c.name, "Customer.DeleteCustomer", in)
	out := new(DeleteCustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Customer service

type CustomerHandler interface {
	RegisterCustomer(context.Context, *RegisterCustomerRequest, *RegisterCustomerResponse) error
	GetCustomer(context.Context, *GetCustomerRequest, *GetCustomerResponse) error
	DeleteCustomer(context.Context, *DeleteCustomerRequest, *DeleteCustomerResponse) error
}

func RegisterCustomerHandler(s server.Server, hdlr CustomerHandler, opts ...server.HandlerOption) error {
	type customer interface {
		RegisterCustomer(ctx context.Context, in *RegisterCustomerRequest, out *RegisterCustomerResponse) error
		GetCustomer(ctx context.Context, in *GetCustomerRequest, out *GetCustomerResponse) error
		DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, out *DeleteCustomerResponse) error
	}
	type Customer struct {
		customer
	}
	h := &customerHandler{hdlr}
	return s.Handle(s.NewHandler(&Customer{h}, opts...))
}

type customerHandler struct {
	CustomerHandler
}

func (h *customerHandler) RegisterCustomer(ctx context.Context, in *RegisterCustomerRequest, out *RegisterCustomerResponse) error {
	return h.CustomerHandler.RegisterCustomer(ctx, in, out)
}

func (h *customerHandler) GetCustomer(ctx context.Context, in *GetCustomerRequest, out *GetCustomerResponse) error {
	return h.CustomerHandler.GetCustomer(ctx, in, out)
}

func (h *customerHandler) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, out *DeleteCustomerResponse) error {
	return h.CustomerHandler.DeleteCustomer(ctx, in, out)
}

// Api Endpoints for Order service

func NewOrderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Order service

type OrderService interface {
	PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...client.CallOption) (*PlaceOrderResponse, error)
	ReturnItem(ctx context.Context, in *ReturnRequest, opts ...client.CallOption) (*ReturnResponse, error)
	CancelOrder(ctx context.Context, in *CancelRequest, opts ...client.CallOption) (*CancelResponse, error)
}

type orderService struct {
	c    client.Client
	name string
}

func NewOrderService(name string, c client.Client) OrderService {
	return &orderService{
		c:    c,
		name: name,
	}
}

func (c *orderService) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...client.CallOption) (*PlaceOrderResponse, error) {
	req := c.c.NewRequest(c.name, "Order.PlaceOrder", in)
	out := new(PlaceOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) ReturnItem(ctx context.Context, in *ReturnRequest, opts ...client.CallOption) (*ReturnResponse, error) {
	req := c.c.NewRequest(c.name, "Order.ReturnItem", in)
	out := new(ReturnResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) CancelOrder(ctx context.Context, in *CancelRequest, opts ...client.CallOption) (*CancelResponse, error) {
	req := c.c.NewRequest(c.name, "Order.CancelOrder", in)
	out := new(CancelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Order service

type OrderHandler interface {
	PlaceOrder(context.Context, *PlaceOrderRequest, *PlaceOrderResponse) error
	ReturnItem(context.Context, *ReturnRequest, *ReturnResponse) error
	CancelOrder(context.Context, *CancelRequest, *CancelResponse) error
}

func RegisterOrderHandler(s server.Server, hdlr OrderHandler, opts ...server.HandlerOption) error {
	type order interface {
		PlaceOrder(ctx context.Context, in *PlaceOrderRequest, out *PlaceOrderResponse) error
		ReturnItem(ctx context.Context, in *ReturnRequest, out *ReturnResponse) error
		CancelOrder(ctx context.Context, in *CancelRequest, out *CancelResponse) error
	}
	type Order struct {
		order
	}
	h := &orderHandler{hdlr}
	return s.Handle(s.NewHandler(&Order{h}, opts...))
}

type orderHandler struct {
	OrderHandler
}

func (h *orderHandler) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, out *PlaceOrderResponse) error {
	return h.OrderHandler.PlaceOrder(ctx, in, out)
}

func (h *orderHandler) ReturnItem(ctx context.Context, in *ReturnRequest, out *ReturnResponse) error {
	return h.OrderHandler.ReturnItem(ctx, in, out)
}

func (h *orderHandler) CancelOrder(ctx context.Context, in *CancelRequest, out *CancelResponse) error {
	return h.OrderHandler.CancelOrder(ctx, in, out)
}

// Api Endpoints for Payment service

func NewPaymentEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Payment service

type PaymentService interface {
}

type paymentService struct {
	c    client.Client
	name string
}

func NewPaymentService(name string, c client.Client) PaymentService {
	return &paymentService{
		c:    c,
		name: name,
	}
}

// Server API for Payment service

type PaymentHandler interface {
}

func RegisterPaymentHandler(s server.Server, hdlr PaymentHandler, opts ...server.HandlerOption) error {
	type payment interface {
	}
	type Payment struct {
		payment
	}
	h := &paymentHandler{hdlr}
	return s.Handle(s.NewHandler(&Payment{h}, opts...))
}

type paymentHandler struct {
	PaymentHandler
}

// Api Endpoints for Shipment service

func NewShipmentEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Shipment service

type ShipmentService interface {
}

type shipmentService struct {
	c    client.Client
	name string
}

func NewShipmentService(name string, c client.Client) ShipmentService {
	return &shipmentService{
		c:    c,
		name: name,
	}
}

// Server API for Shipment service

type ShipmentHandler interface {
}

func RegisterShipmentHandler(s server.Server, hdlr ShipmentHandler, opts ...server.HandlerOption) error {
	type shipment interface {
	}
	type Shipment struct {
		shipment
	}
	h := &shipmentHandler{hdlr}
	return s.Handle(s.NewHandler(&Shipment{h}, opts...))
}

type shipmentHandler struct {
	ShipmentHandler
}
